
# If left and right pointers are in the vowels, swap them.
# Else increment left and decrement right.
# Return "".join(s)
# Dry testing with example
# Talk about TIME and Space complexity

# s = "leetcode" 
# l' e' e' t' c' o' d' e

class Solution(object):
  def reverseVowels(self, s):
    s = list(s)  # "leetcode" = l' e' o' t' c' e' d' e
    vowels = ("aAeEiIoOuU")
    left = 0                  # l' e' e' t' c' o' d' e
    right = len(s)-1          #          ||

    while left < right:
      while left < right and not s[left] in vowels:
        left +=1

      while left < right and not s[right] in vowels:
        right -=1

      s[left], s[right] = s[right], s[left]
      left +=1
      right -=1

    return "".join(s)

test = "leetcode" 
test2 = "leotcede"
print(Solution().reverseVowels(test))
print(Solution().reverseVowels(test2))

# TIME complexity = O(N)
# SPACE complexity = O(1)
